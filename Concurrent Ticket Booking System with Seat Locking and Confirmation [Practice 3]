const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const app = express();
const port = 3000;

// Middleware to parse form data
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static files (e.g., addbook.html)
app.use(express.static(__dirname));

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/Liberary')
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Define Book Schema
const bookSchema = new mongoose.Schema({
  bookno: {
    type: Number,
    required: true,
    min: 1,
    max: 1000,
    unique: true
  },
  title: {
    type: String,
    required: true,
    trim: true
  },
  author: {
    type: String,
    required: true,
    trim: true
  },
  price: {
    type: Number,
    required: true,
    min: 0.01
  }
});

// Create Book Model
const Book = mongoose.model('Book', bookSchema);

// Handle POST request to save a book
app.post('/savebook', async (req, res) => {
  const { bookno, title, author, price } = req.body;

  // Create book document
  const newBook = new Book({
    bookno: Number(bookno),
    title,
    author,
    price: Number(price)
  });

  try {
    await newBook.save();
    res.send(`<p>Record Saved.</p><a href="/addbook.html">Go to Home Page</a>`);
  } catch (err) {
    if (err.code === 11000) {
      res.send(`<p>Book number already exists.</p><a href="/addbook.html">Go back</a>`);
    } else {
      res.send(`<p>Error: ${err.message}</p><a href="/addbook.html">Go back</a>`);
    }
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
